type Query {
    popularComments: [Comment]
    usersCommentCount(userId: Int): Int
    usersComments(userId: Int, page: Int, size: Int): [Comment]
    contentsComments(contentId: Int, page: Int, size: Int): [Comment]
    collectionsComments(collectionId: Int, page: Int, size: Int): [Comment]
}
type Mutation {
    createComment(input: CommentInput): Comment
    deleteComment(id: ID!): Comment
}
enum CommentSort {
    CONTENT
    COLLECTION
}
input CommentInput {
    sort: CommentSort
    parentId: Int
    parentCommentId: Int
    userId: Int
    content: String
    isSpoiler: Boolean
}
type Comment {
    id: ID
    sort: CommentSort
    parentId: Int
    parentCommentId: Int
    userId: Int
    content: String
    isSpoiler: Boolean
    heartCount: Int
    createdAt: Date
    updatedAt: Date
}